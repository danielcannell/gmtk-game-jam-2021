[gd_scene load_steps=16 format=2]

[ext_resource path="res://Art/energy-ship.png" type="Texture" id=1]
[ext_resource path="res://Art/red-ship.png" type="Texture" id=2]
[ext_resource path="res://Art/shield-ship.png" type="Texture" id=3]
[ext_resource path="res://Effects/ShipSaved.gd" type="Script" id=4]
[ext_resource path="res://Art/smooth_noise2.png" type="Texture" id=5]

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

//  noise texture (see Dissolve.material for GUI Generated one or Main.gd::_on_reseed_noise_pressed() for scripted one)
uniform sampler2D noise_tex : hint_albedo;
// burn ramp (gradiant from some color to transparent) - see Dissolve.material for GUI generated one
uniform sampler2D burn_ramp : hint_albedo;
// size of burning path (0 is infinitely short)
uniform float burn_size : hint_range(0.1, 1);

// position (time) of burning
uniform float burn_position : hint_range(-1, 1);

void fragment()
{
	// get texture pixel color * tint
	// thats our result without burning effect.
	// We use COLOR as final color (we can use variable and assign it to COLOR at the end, but there is no reason to care)
	// TEXTURE is Sprite.Texture from GODOT
	// UV is UV from GODOT
	// At first, COLOR is filled with tint (Sprite -> Modulate) from GODOT (and from vertex shader).
	COLOR = texture(TEXTURE, UV) * COLOR;
	
	// get some noise minus our position in time (thats why burn_position is range(-1, 1))
	float test = texture(noise_tex, UV).r - burn_position;
	
	// if our noise is bigger then treshold
	if (test < burn_size) {
	
		// get burn color from ramp
		vec4 burn = texture(burn_ramp, vec2(test * (1f / burn_size), 0));

		// override result rgb color with burn rgb color (NOT alpha!)
		COLOR.rgb = burn.rgb;
		
		// and set alpha to lower one from texture or burn.
		// that means we keep transparent sprite (COLOR.a is lower) and transparent 'burned pathes' (burn.a is lower)
		COLOR.a = min(burn.a, COLOR.a);
	}
}"

[sub_resource type="Gradient" id=4]
offsets = PoolRealArray( 0.584967, 0.859477 )
colors = PoolColorArray( 0.796078, 0.0745098, 0.0745098, 0, 0, 1, 0.94902, 1 )

[sub_resource type="GradientTexture" id=5]
gradient = SubResource( 4 )

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/burn_size = 0.338
shader_param/burn_position = -1.0
shader_param/noise_tex = ExtResource( 5 )
shader_param/burn_ramp = SubResource( 5 )

[sub_resource type="SpriteFrames" id=1]
animations = [ {
"frames": [ ExtResource( 2 ), ExtResource( 3 ), ExtResource( 1 ) ],
"loop": true,
"name": "default",
"speed": 5.0
} ]

[sub_resource type="Gradient" id=6]
colors = PoolColorArray( 1, 1, 1, 1, 0, 1, 0.941176, 1 )

[sub_resource type="GradientTexture" id=7]
gradient = SubResource( 6 )

[sub_resource type="Curve" id=8]
_data = [ Vector2( 0.0275229, 0.0931818 ), 0.0, 0.0, 0, 0, Vector2( 0.0825688, 0.622727 ), 1.76948, 1.76948, 0, 0, Vector2( 0.201835, 0.940909 ), 1.80165, 1.80165, 0, 0, Vector2( 0.518349, 1 ), 0.0, 0.0, 0, 0, Vector2( 0.96789, 0 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=9]
curve = SubResource( 8 )

[sub_resource type="ParticlesMaterial" id=10]
emission_shape = 1
emission_sphere_radius = 54.78
flag_disable_z = true
spread = 180.0
gravity = Vector3( 0, 0, 0 )
orbit_velocity = 1.0
orbit_velocity_random = 0.0
linear_accel = 38.66
radial_accel = -53.79
tangential_accel = 18.53
damping = 21.01
scale = 2.0
scale_random = 0.67
scale_curve = SubResource( 9 )
color_ramp = SubResource( 7 )

[node name="ShipSaved" type="Node2D"]
script = ExtResource( 4 )

[node name="Sprite" type="AnimatedSprite" parent="."]
material = SubResource( 3 )
frames = SubResource( 1 )

[node name="Tween" type="Tween" parent="."]

[node name="Particles2D" type="Particles2D" parent="."]
position = Vector2( 0, -0.297302 )
emitting = false
amount = 50
lifetime = 3.9
one_shot = true
explosiveness = 0.86
process_material = SubResource( 10 )
