[gd_scene load_steps=5 format=2]

[ext_resource path="res://Art/cone.png" type="Texture" id=1]
[ext_resource path="res://Ships/Exhaust.gd" type="Script" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 transparent : hint_color;
uniform vec4 inner : hint_color;
uniform vec4 outer : hint_color;

uniform float inner_threshold = 0.4;
uniform float outer_threshold = 0.0;
uniform float soft_edge = 0.04;
uniform float speed = 3.00;

uniform int OCTAVES = 6;

float rand(vec2 coord){
	return fract(sin(dot(coord, vec2(12.9898, 78.233)))* 43758.5453123);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);

	// 4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

float fbm(vec2 coord){
	float value = 0.0;
	float scale = 0.5;

	for(int i = 0; i < OCTAVES; i++){
		value += noise(coord) * scale;
		coord *= 2.0;
		scale *= 0.5;
	}
	return value;
}

float overlay(float base, float top) {
	if (base < 0.5) {
		return 2.0 * base * top;
	} else {
		return 1.0 - 2.0 * (1.0 - base) * (1.0 - top);
	}
}

void fragment() {
    float time = TIME + MODULATE.a;
	vec2 coord = UV * 3.0;
	vec2 fbmcoord = coord / 6.0;

	float noise1 = noise(coord / 20.0 + vec2(time * 0.25, time * 4.0));
	float noise2 = noise(coord + vec2(time * 0.5, time * 10.0));

	float fbm_noise = fbm(fbmcoord + vec2(0.0, time * speed));
	fbm_noise = overlay(fbm_noise, UV.y);

	float everything_combined = fbm_noise;
    vec2 cord = UV;
    cord.x += (-0.0 + 0.16 * sin(time * 50.)) * smoothstep(0.2, 1, (1.-cord.y)) * fbm_noise;
    everything_combined *= texture(TEXTURE, cord).a;

	if (everything_combined < outer_threshold){
		COLOR = transparent;
	} else if (everything_combined < outer_threshold + soft_edge){
		COLOR = mix(transparent, outer, (everything_combined - outer_threshold) / soft_edge);
	} else if (everything_combined < inner_threshold){
		COLOR = outer;
	} else if (everything_combined < inner_threshold + soft_edge){
		COLOR = mix(outer, inner, (everything_combined - inner_threshold) / soft_edge);
	} else {
		COLOR = inner;
	}
  
    //vec2 cord = UV;
    //cord.x += (-0.03 + 0.06 * sin(TIME * 50.)) * smoothstep(0.2, 1, (1.-cord.y)) * fbm_noise;
    //COLOR = vec4(COLOR.xyz, texture(TEXTURE, cord).a);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/transparent = Color( 0, 0, 0, 0 )
shader_param/inner = Color( 1, 0.101961, 0.101961, 1 )
shader_param/outer = Color( 0.898039, 0.694118, 0.0745098, 1 )
shader_param/inner_threshold = 0.6
shader_param/outer_threshold = 0.1
shader_param/soft_edge = 0.2
shader_param/speed = 3.0
shader_param/OCTAVES = 6

[node name="Node2D" type="Node2D"]
script = ExtResource( 2 )

[node name="Scaler" type="Node2D" parent="."]

[node name="Cone" type="Sprite" parent="Scaler"]
material = SubResource( 2 )
position = Vector2( 0, 31.723 )
rotation = -3.14159
texture = ExtResource( 1 )
